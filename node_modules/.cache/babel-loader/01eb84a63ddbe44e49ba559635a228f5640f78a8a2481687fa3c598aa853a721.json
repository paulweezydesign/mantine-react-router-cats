{"ast":null,"code":"import _slicedToArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nvar eventListerOptions = {\n  passive: true\n};\nfunction useViewportSize() {\n  var _useState = useState({\n      width: 0,\n      height: 0\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    windowSize = _useState2[0],\n    setWindowSize = _useState2[1];\n  var setSize = useCallback(function () {\n    setWindowSize({\n      width: window.innerWidth || 0,\n      height: window.innerHeight || 0\n    });\n  }, []);\n  useWindowEvent(\"resize\", setSize, eventListerOptions);\n  useWindowEvent(\"orientationchange\", setSize, eventListerOptions);\n  useEffect(setSize, []);\n  return windowSize;\n}\nexport { useViewportSize };","map":{"version":3,"mappings":";;;AAEA,IAAMA,kBAAkB,GAAG;EACzBC,OAAO,EAAE;AACX,CAAC;AACM,SAASC,eAAe,GAAG;EAChC,gBAAoCC,QAAQ,CAAC;MAC3CC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACZ,CAAG,CAAC;IAAA;IAHKC,UAAU;IAAEC,aAAa;EAIhC,IAAMC,OAAO,GAAGC,WAAW,CAAC,YAAM;IAChCF,aAAa,CAAC;MAAEH,KAAK,EAAEM,MAAM,CAACC,UAAU,IAAI,CAAC;MAAEN,MAAM,EAAEK,MAAM,CAACE,WAAW,IAAI;IAAC,CAAE,CAAC;EACrF,CAAG,EAAE,EAAE,CAAC;EACNC,cAAc,CAAC,QAAQ,EAAEL,OAAO,EAAER,kBAAkB,CAAC;EACrDa,cAAc,CAAC,mBAAmB,EAAEL,OAAO,EAAER,kBAAkB,CAAC;EAChEc,SAAS,CAACN,OAAO,EAAE,EAAE,CAAC;EACtB,OAAOF,UAAU;AACnB","names":["eventListerOptions","passive","useViewportSize","useState","width","height","windowSize","setWindowSize","setSize","useCallback","window","innerWidth","innerHeight","useWindowEvent","useEffect"],"sources":["/workspaces/mantine-react-router-cats/node_modules/@mantine/hooks/src/use-viewport-size/use-viewport-size.ts"],"sourcesContent":["import { useCallback, useState, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\nconst eventListerOptions = {\n  passive: true,\n};\n\nexport function useViewportSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  const setSize = useCallback(() => {\n    setWindowSize({ width: window.innerWidth || 0, height: window.innerHeight || 0 });\n  }, []);\n\n  useWindowEvent('resize', setSize, eventListerOptions);\n  useWindowEvent('orientationchange', setSize, eventListerOptions);\n  useEffect(setSize, []);\n\n  return windowSize;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}