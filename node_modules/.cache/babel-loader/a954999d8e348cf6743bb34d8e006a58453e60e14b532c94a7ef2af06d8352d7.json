{"ast":null,"code":"import _slicedToArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nfunction useHash() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    hash = _useState2[0],\n    setHashValue = _useState2[1];\n  var setHash = function setHash(value) {\n    var valueWithHash = value.startsWith(\"#\") ? value : \"#\".concat(value);\n    window.location.hash = valueWithHash;\n    setHashValue(valueWithHash);\n  };\n  useWindowEvent(\"hashchange\", function () {\n    var newHash = window.location.hash;\n    if (hash !== newHash) {\n      setHashValue(hash);\n    }\n  });\n  useEffect(function () {\n    setHashValue(window.location.hash);\n  }, []);\n  return [hash, setHash];\n}\nexport { useHash };","map":{"version":3,"mappings":";;;AAEO,SAASA,OAAO,GAAG;EACxB,gBAA6BC,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAlCC,IAAI;IAAEC,YAAY;EACzB,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAIC,KAAK,EAAK;IACzB,IAAMC,aAAa,GAAGD,KAAK,CAACE,UAAU,CAAC,GAAG,CAAC,GAAGF,KAAK,cAAOA,KAAK,CAAE;IACjEG,MAAM,CAACC,QAAQ,CAACP,IAAI,GAAGI,aAAa;IACpCH,YAAY,CAACG,aAAa,CAAC;EAC/B,CAAG;EACDI,cAAc,CAAC,YAAY,EAAE,YAAM;IACjC,IAAMC,OAAO,GAAGH,MAAM,CAACC,QAAQ,CAACP,IAAI;IACpC,IAAIA,IAAI,KAAKS,OAAO,EAAE;MACpBR,YAAY,CAACD,IAAI,CAAC;IACxB;EACA,CAAG,CAAC;EACFU,SAAS,CAAC,YAAM;IACdT,YAAY,CAACK,MAAM,CAACC,QAAQ,CAACP,IAAI,CAAC;EACtC,CAAG,EAAE,EAAE,CAAC;EACN,OAAO,CAACA,IAAI,EAAEE,OAAO,CAAC;AACxB","names":["useHash","useState","hash","setHashValue","setHash","value","valueWithHash","startsWith","window","location","useWindowEvent","newHash","useEffect"],"sources":["/workspaces/mantine-react-router-cats/node_modules/@mantine/hooks/src/use-hash/use-hash.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\nexport function useHash() {\n  const [hash, setHashValue] = useState<string>('');\n\n  const setHash = (value: string) => {\n    const valueWithHash = value.startsWith('#') ? value : `#${value}`;\n    window.location.hash = valueWithHash;\n    setHashValue(valueWithHash);\n  };\n\n  useWindowEvent('hashchange', () => {\n    const newHash = window.location.hash;\n    if (hash !== newHash) {\n      setHashValue(hash);\n    }\n  });\n\n  useEffect(() => {\n    setHashValue(window.location.hash);\n  }, []);\n\n  return [hash, setHash] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}