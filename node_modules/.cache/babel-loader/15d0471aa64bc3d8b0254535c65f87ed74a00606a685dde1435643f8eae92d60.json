{"ast":null,"code":"function getCurveProps(_ref) {\n  var size = _ref.size,\n    thickness = _ref.thickness,\n    sum = _ref.sum,\n    value = _ref.value,\n    root = _ref.root,\n    offset = _ref.offset;\n  var radius = (size * 0.9 - thickness * 2) / 2;\n  var deg = Math.PI * radius * 2 / 100;\n  var strokeDasharray = root ? \"\".concat((100 - sum) * deg, \", \").concat(sum * deg) : \"\".concat(value * deg, \", \").concat((100 - value) * deg);\n  return {\n    strokeWidth: thickness,\n    cx: size / 2,\n    cy: size / 2,\n    r: radius,\n    transform: root ? \"scale(1, -1) translate(0, -\".concat(size, \")\") : null,\n    strokeDasharray: strokeDasharray,\n    strokeDashoffset: root ? 0 : offset\n  };\n}\nexport { getCurveProps };","map":{"version":3,"mappings":"AAAO,SAASA,aAAa,OAAgD;EAAA,IAA7CC,IAAI,QAAJA,IAAI;IAAEC,SAAS,QAATA,SAAS;IAAEC,GAAG,QAAHA,GAAG;IAAEC,KAAK,QAALA,KAAK;IAAEC,IAAI,QAAJA,IAAI;IAAEC,MAAM,QAANA,MAAM;EACvE,IAAMC,MAAM,GAAG,CAACN,IAAI,GAAG,GAAG,GAAGC,SAAS,GAAG,CAAC,IAAI,CAAC;EAC/C,IAAMM,GAAG,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM,GAAG,CAAC,GAAG,GAAG;EACtC,IAAMI,eAAe,GAAGN,IAAI,aAAM,CAAC,GAAG,GAAGF,GAAG,IAAIK,GAAG,eAAKL,GAAG,GAAGK,GAAG,cAAQJ,KAAK,GAAGI,GAAG,eAAK,CAAC,GAAG,GAAGJ,KAAK,IAAII,GAAG,CAAE;EAC9G,OAAO;IACLI,WAAW,EAAEV,SAAS;IACtBW,EAAE,EAAEZ,IAAI,GAAG,CAAC;IACZa,EAAE,EAAEb,IAAI,GAAG,CAAC;IACZc,CAAC,EAAER,MAAM;IACTS,SAAS,EAAEX,IAAI,wCAAiCJ,IAAI,SAAM,IAAI;IAC9DU,eAAe,EAAfA,eAAe;IACfM,gBAAgB,EAAEZ,IAAI,GAAG,CAAC,GAAGC;EACjC,CAAG;AACH","names":["getCurveProps","size","thickness","sum","value","root","offset","radius","deg","Math","PI","strokeDasharray","strokeWidth","cx","cy","r","transform","strokeDashoffset"],"sources":["/workspaces/mantine-react-router-cats/node_modules/@mantine/core/src/RingProgress/Curve/get-curve-props.ts"],"sourcesContent":["interface GetCurveProps {\n  size: number;\n  thickness: number;\n  sum: number;\n  value: number;\n  root: boolean;\n  offset: number;\n}\n\nexport function getCurveProps({ size, thickness, sum, value, root, offset }: GetCurveProps) {\n  const radius = (size * 0.9 - thickness * 2) / 2;\n  const deg = (Math.PI * radius * 2) / 100;\n\n  const strokeDasharray = root\n    ? `${(100 - sum) * deg}, ${sum * deg}`\n    : `${value * deg}, ${(100 - value) * deg}`;\n\n  return {\n    strokeWidth: thickness,\n    cx: size / 2,\n    cy: size / 2,\n    r: radius,\n    transform: root ? `scale(1, -1) translate(0, -${size})` : null,\n    strokeDasharray,\n    strokeDashoffset: root ? 0 : offset,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}