{"ast":null,"code":"import _toConsumableArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\nfunction useQueue(_ref) {\n  var _ref$initialValues = _ref.initialValues,\n    initialValues = _ref$initialValues === void 0 ? [] : _ref$initialValues,\n    limit = _ref.limit;\n  var _useState = useState({\n      state: initialValues.slice(0, limit),\n      queue: initialValues.slice(limit)\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _useState2[0],\n    state = _useState2$.state,\n    queue = _useState2$.queue,\n    setState = _useState2[1];\n  var add = function add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    return setState(function (current) {\n      var results = [].concat(_toConsumableArray(current.state), _toConsumableArray(current.queue), items);\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n  var update = function update(fn) {\n    return setState(function (current) {\n      var results = fn([].concat(_toConsumableArray(current.state), _toConsumableArray(current.queue)));\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n  var cleanQueue = function cleanQueue() {\n    return setState(function (current) {\n      return {\n        state: current.state,\n        queue: []\n      };\n    });\n  };\n  return {\n    state: state,\n    queue: queue,\n    add: add,\n    update: update,\n    cleanQueue: cleanQueue\n  };\n}\nexport { useQueue };","map":{"version":3,"mappings":";;;AACO,SAASA,QAAQ,OAAgC;EAAA,8BAA7BC,aAAa;IAAbA,aAAa,mCAAG,EAAE;IAAEC,KAAK,QAALA,KAAK;EAClD,gBAAqCC,QAAQ,CAAC;MAC5CC,KAAK,EAAEH,aAAa,CAACI,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;MACpCI,KAAK,EAAEL,aAAa,CAACI,KAAK,CAACH,KAAK;IACpC,CAAG,CAAC;IAAA;IAAA;IAHOE,KAAK,eAALA,KAAK;IAAEE,KAAK,eAALA,KAAK;IAAIC,QAAQ;EAIjC,IAAMC,GAAG,GAAG,SAANA,GAAG;IAAA,kCAAOC,KAAK;MAALA,KAAK;IAAA;IAAA,OAAKF,QAAQ,CAAC,UAACG,OAAO,EAAK;MAC9C,IAAMC,OAAO,gCAAOD,OAAO,CAACN,KAAK,sBAAKM,OAAO,CAACJ,KAAK,GAAKG,KAAK,CAAC;MAC9D,OAAO;QACLL,KAAK,EAAEO,OAAO,CAACN,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;QAC9BI,KAAK,EAAEK,OAAO,CAACN,KAAK,CAACH,KAAK;MAChC,CAAK;IACL,CAAG,CAAC;EAAA;EACF,IAAMU,MAAM,GAAG,SAATA,MAAM,CAAIC,EAAE;IAAA,OAAKN,QAAQ,CAAC,UAACG,OAAO,EAAK;MAC3C,IAAMC,OAAO,GAAGE,EAAE,8BAAKH,OAAO,CAACN,KAAK,sBAAKM,OAAO,CAACJ,KAAK,GAAE;MACxD,OAAO;QACLF,KAAK,EAAEO,OAAO,CAACN,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC;QAC9BI,KAAK,EAAEK,OAAO,CAACN,KAAK,CAACH,KAAK;MAChC,CAAK;IACL,CAAG,CAAC;EAAA;EACF,IAAMY,UAAU,GAAG,SAAbA,UAAU;IAAA,OAASP,QAAQ,CAAC,UAACG,OAAO;MAAA,OAAM;QAAEN,KAAK,EAAEM,OAAO,CAACN,KAAK;QAAEE,KAAK,EAAE;MAAE,CAAE;IAAA,CAAC,CAAC;EAAA;EACrF,OAAO;IACLF,KAAK,EAALA,KAAK;IACLE,KAAK,EAALA,KAAK;IACLE,GAAG,EAAHA,GAAG;IACHI,MAAM,EAANA,MAAM;IACNE,UAAU,EAAVA;EACJ,CAAG;AACH","names":["useQueue","initialValues","limit","useState","state","slice","queue","setState","add","items","current","results","update","fn","cleanQueue"],"sources":["/workspaces/mantine-react-router-cats/node_modules/@mantine/hooks/src/use-queue/use-queue.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useQueue<T>({ initialValues = [], limit }: { initialValues?: T[]; limit: number }) {\n  const [{ state, queue }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit),\n  });\n\n  const add = (...items: T[]) =>\n    setState((current) => {\n      const results = [...current.state, ...current.queue, ...items];\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const update = (fn: (state: T[]) => T[]) =>\n    setState((current) => {\n      const results = fn([...current.state, ...current.queue]);\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const cleanQueue = () => setState((current) => ({ state: current.state, queue: [] }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}