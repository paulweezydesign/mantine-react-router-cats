{"ast":null,"code":"import _toConsumableArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\nfunction useSelectionState() {\n  var initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n  var _useState = useState(initialSelection),\n    _useState2 = _slicedToArray(_useState, 2),\n    selection = _useState2[0],\n    setSelection = _useState2[1];\n  var handleSelect = function handleSelect(listIndex, value) {\n    return setSelection(function (currentSelection) {\n      var listSelection = currentSelection[listIndex];\n      var result = listSelection;\n      if (typeof value === \"string\") {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter(function (item) {\n            return item !== value;\n          });\n        } else {\n          result = [].concat(_toConsumableArray(listSelection), [value]);\n        }\n      }\n      var clone = _toConsumableArray(currentSelection);\n      clone[listIndex] = result;\n      return clone;\n    });\n  };\n  var handleDeselect = function handleDeselect(listIndex, values) {\n    return setSelection(function (currentSelection) {\n      var clone = _toConsumableArray(currentSelection);\n      clone[listIndex] = currentSelection[listIndex].filter(function (item) {\n        return !values.includes(item);\n      });\n      return clone;\n    });\n  };\n  var handleDeselectAll = function handleDeselectAll(listIndex) {\n    return setSelection(function (currentSelection) {\n      var clone = _toConsumableArray(currentSelection);\n      clone[listIndex] = [];\n      return clone;\n    });\n  };\n  var handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\nexport { useSelectionState };","map":{"version":3,"mappings":";;;AACO,SAASA,iBAAiB,GAA8B;EAAA,IAA7BC,gBAAgB,uEAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EAC3D,gBAAkCC,QAAQ,CAACD,gBAAgB,CAAC;IAAA;IAArDE,SAAS;IAAEC,YAAY;EAC9B,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,SAAS,EAAEC,KAAK;IAAA,OAAKH,YAAY,CAAC,UAACI,gBAAgB,EAAK;MAC5E,IAAMC,aAAa,GAAGD,gBAAgB,CAACF,SAAS,CAAC;MACjD,IAAII,MAAM,GAAGD,aAAa;MAC1B,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;QAC7B,IAAIE,aAAa,CAACE,QAAQ,CAACJ,KAAK,CAAC,EAAE;UACjCG,MAAM,GAAGD,aAAa,CAACG,MAAM,CAAC,UAACC,IAAI;YAAA,OAAKA,IAAI,KAAKN,KAAK;UAAA,EAAC;QAC/D,CAAO,MAAM;UACLG,MAAM,gCAAOD,aAAa,IAAEF,KAAK,EAAC;QAC1C;MACA;MACI,IAAMO,KAAK,sBAAON,gBAAgB,CAAC;MACnCM,KAAK,CAACR,SAAS,CAAC,GAAGI,MAAM;MACzB,OAAOI,KAAK;IAChB,CAAG,CAAC;EAAA;EACF,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIT,SAAS,EAAEU,MAAM;IAAA,OAAKZ,YAAY,CAAC,UAACI,gBAAgB,EAAK;MAC/E,IAAMM,KAAK,sBAAON,gBAAgB,CAAC;MACnCM,KAAK,CAACR,SAAS,CAAC,GAAGE,gBAAgB,CAACF,SAAS,CAAC,CAACM,MAAM,CAAC,UAACC,IAAI;QAAA,OAAK,CAACG,MAAM,CAACL,QAAQ,CAACE,IAAI,CAAC;MAAA,EAAC;MACvF,OAAOC,KAAK;IAChB,CAAG,CAAC;EAAA;EACF,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIX,SAAS;IAAA,OAAKF,YAAY,CAAC,UAACI,gBAAgB,EAAK;MAC1E,IAAMM,KAAK,sBAAON,gBAAgB,CAAC;MACnCM,KAAK,CAACR,SAAS,CAAC,GAAG,EAAE;MACrB,OAAOQ,KAAK;IAChB,CAAG,CAAC;EAAA;EACF,IAAMI,QAAQ,GAAG;IACfC,MAAM,EAAEd,YAAY;IACpBe,QAAQ,EAAEL,cAAc;IACxBM,WAAW,EAAEJ;EACjB,CAAG;EACD,OAAO,CAACd,SAAS,EAAEe,QAAQ,CAAC;AAC9B","names":["useSelectionState","initialSelection","useState","selection","setSelection","handleSelect","listIndex","value","currentSelection","listSelection","result","includes","filter","item","clone","handleDeselect","values","handleDeselectAll","handlers","select","deselect","deselectAll"],"sources":["/workspaces/mantine-react-router-cats/node_modules/@mantine/core/src/TransferList/use-selection-state/use-selection-state.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport type Selection = [string[], string[]];\n\nexport function useSelectionState(initialSelection: Selection = [[], []]) {\n  const [selection, setSelection] = useState<Selection>(initialSelection);\n\n  const handleSelect = (listIndex: 0 | 1, value: string) =>\n    setSelection((currentSelection) => {\n      const listSelection = currentSelection[listIndex];\n      let result = listSelection;\n\n      if (typeof value === 'string') {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter((item) => item !== value);\n        } else {\n          result = [...listSelection, value];\n        }\n      }\n\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = result;\n      return clone;\n    });\n\n  const handleDeselect = (listIndex: 0 | 1, values: string[]) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = currentSelection[listIndex].filter((item) => !values.includes(item));\n      return clone;\n    });\n\n  const handleDeselectAll = (listIndex: 0 | 1) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = [];\n      return clone;\n    });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll,\n  };\n\n  return [selection, handlers] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}