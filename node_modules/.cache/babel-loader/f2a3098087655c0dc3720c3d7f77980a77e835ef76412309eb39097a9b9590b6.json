{"ast":null,"code":"import _slicedToArray from \"/workspaces/mantine-react-router-cats/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useState, useEffect } from 'react';\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n  return false;\n}\nfunction useFocusWithin() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    onBlur = _ref.onBlur,\n    onFocus = _ref.onFocus;\n  var ref = useRef();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    focused = _useState2[0],\n    _setFocused = _useState2[1];\n  var focusedRef = useRef(false);\n  var setFocused = function setFocused(value) {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n  var handleFocusIn = function handleFocusIn(event) {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus == null ? void 0 : onFocus(event);\n    }\n  };\n  var handleFocusOut = function handleFocusOut(event) {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n  useEffect(function () {\n    if (ref.current) {\n      ref.current.addEventListener(\"focusin\", handleFocusIn);\n      ref.current.addEventListener(\"focusout\", handleFocusOut);\n      return function () {\n        var _a, _b;\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"focusin\", handleFocusIn);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"focusout\", handleFocusOut);\n      };\n    }\n    return void 0;\n  }, [handleFocusIn, handleFocusOut]);\n  return {\n    ref: ref,\n    focused: focused\n  };\n}\nexport { useFocusWithin };","map":{"version":3,"mappings":";;AACA,SAASA,qBAAqB,CAACC,KAAK,EAAE;EACpC,IAAIA,KAAK,CAACC,aAAa,YAAYC,WAAW,IAAIF,KAAK,CAACG,aAAa,YAAYD,WAAW,EAAE;IAC5F,OAAOF,KAAK,CAACC,aAAa,CAACG,QAAQ,CAACJ,KAAK,CAACG,aAAa,CAAC;EAC5D;EACE,OAAO,KAAK;AACd;AACO,SAASE,cAAc,GAGtB;EAAA,+EAAJ,EAAE;IAFJC,MAAM,QAANA,MAAM;IACNC,OAAO,QAAPA,OAAO;EAEP,IAAMC,GAAG,GAAGC,MAAM,EAAE;EACpB,gBAA+BC,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAvCC,OAAO;IAAEC,WAAW;EAC3B,IAAMC,UAAU,GAAGJ,MAAM,CAAC,KAAK,CAAC;EAChC,IAAMK,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAK,EAAK;IAC5BH,WAAW,CAACG,KAAK,CAAC;IAClBF,UAAU,CAACG,OAAO,GAAGD,KAAK;EAC9B,CAAG;EACD,IAAME,aAAa,GAAG,SAAhBA,aAAa,CAAIjB,KAAK,EAAK;IAC/B,IAAI,CAACa,UAAU,CAACG,OAAO,EAAE;MACvBF,UAAU,CAAC,IAAI,CAAC;MAChBP,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACP,KAAK,CAAC;IAC/C;EACA,CAAG;EACD,IAAMkB,cAAc,GAAG,SAAjBA,cAAc,CAAIlB,KAAK,EAAK;IAChC,IAAIa,UAAU,CAACG,OAAO,IAAI,CAACjB,qBAAqB,CAACC,KAAK,CAAC,EAAE;MACvDc,UAAU,CAAC,KAAK,CAAC;MACjBR,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACN,KAAK,CAAC;IAC7C;EACA,CAAG;EACDmB,SAAS,CAAC,YAAM;IACd,IAAIX,GAAG,CAACQ,OAAO,EAAE;MACfR,GAAG,CAACQ,OAAO,CAACI,gBAAgB,CAAC,SAAS,EAAEH,aAAa,CAAC;MACtDT,GAAG,CAACQ,OAAO,CAACI,gBAAgB,CAAC,UAAU,EAAEF,cAAc,CAAC;MACxD,OAAO,YAAM;QACX,IAAIG,EAAE,EAAEC,EAAE;QACV,CAACD,EAAE,GAAGb,GAAG,CAACQ,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGK,EAAE,CAACE,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;QACtF,CAACK,EAAE,GAAGd,GAAG,CAACQ,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGM,EAAE,CAACC,mBAAmB,CAAC,UAAU,EAAEL,cAAc,CAAC;MAChG,CAAO;IACP;IACI,OAAO,KAAK,CAAC;EACjB,CAAG,EAAE,CAACD,aAAa,EAAEC,cAAc,CAAC,CAAC;EACnC,OAAO;IAAEV,GAAG,EAAHA,GAAG;IAAEG,OAAO,EAAPA;EAAO,CAAE;AACzB","names":["containsRelatedTarget","event","currentTarget","HTMLElement","relatedTarget","contains","useFocusWithin","onBlur","onFocus","ref","useRef","useState","focused","_setFocused","focusedRef","setFocused","value","current","handleFocusIn","handleFocusOut","useEffect","addEventListener","_a","_b","removeEventListener"],"sources":["/workspaces/mantine-react-router-cats/node_modules/@mantine/hooks/src/use-focus-within/use-focus-within.ts"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nexport interface UseFocusWithinOptions {\n  onFocus?(event: FocusEvent): void;\n  onBlur?(event: FocusEvent): void;\n}\n\nfunction containsRelatedTarget(event: FocusEvent) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nexport function useFocusWithin<T extends HTMLElement = any>({\n  onBlur,\n  onFocus,\n}: UseFocusWithinOptions = {}): { ref: React.MutableRefObject<T>; focused: boolean } {\n  const ref = useRef<T>();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const setFocused = (value: boolean) => {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = (event: FocusEvent) => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus?.(event);\n    }\n  };\n\n  const handleFocusOut = (event: FocusEvent) => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur?.(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('focusin', handleFocusIn);\n      ref.current.addEventListener('focusout', handleFocusOut);\n\n      return () => {\n        ref.current?.removeEventListener('focusin', handleFocusIn);\n        ref.current?.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n\n    return undefined;\n  }, [handleFocusIn, handleFocusOut]);\n\n  return { ref, focused };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}